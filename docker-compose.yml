version: '3.8'

services:
  # Eureka Server
  eureka-server:
    image: springcloud/eureka
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices

  # PostgreSQL for users service
  postgres-users:
    image: postgres:latest
    container_name: postgres-users
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qawsed?
    ports:
      - "5431:5432"
    networks:
      - microservices

  # PostgreSQL for products service
  postgres-products:
    image: postgres:latest
    container_name: postgres-products
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qawsed?
    ports:
      - "5432:5432"
    networks:
      - microservices

  # PostgreSQL for orders service
  postgres-orders:
    image: postgres:latest
    container_name: postgres-orders
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qawsed?
    ports:
      - "5433:5432"
    networks:
      - microservices

  # Users microservice
  users-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: users-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-users:5432/userdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: qawsed?
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - postgres-users
      - eureka-server
    networks:
      - microservices

  # Products microservice
  products-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: products-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-products:5432/productdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: qawsed?
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - postgres-products
      - eureka-server
    networks:
      - microservices

  # Orders microservice
  orders-service:
    build:
      context: ./orderservice
      dockerfile: Dockerfile
    container_name: orders-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-orders:5432/orderdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: qawsed?
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - postgres-orders
      - eureka-server
    networks:
      - microservices

  # Gateway service
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      SPRING_APPLICATION_NAME: gateway-service
      SERVER_PORT: 8089
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8089:8089"
    depends_on:
      - eureka-server
    networks:
      - microservices

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - microservices

  # Loki
  loki:
    image: grafana/loki:2.8.0
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - C:/Users/taha_/OneDrive/Desktop/microservices-demo/loki-promtail/loki-config.yaml:/etc/loki/loki-config.yaml
    networks:
      - microservices

  # Promtail
  promtail:
    image: grafana/promtail:2.8.0
    volumes:
      - C:/Users/taha_/OneDrive/Desktop/microservices-demo/loki-promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - C:/Users/taha_/OneDrive/Desktop/microservices-demo/user-service/logs:/var/log/user-service
      - C:/Users/taha_/OneDrive/Desktop/microservices-demo/product-service/logs:/var/log/product-service
      - C:/Users/taha_/OneDrive/Desktop/microservices-demo/order-service/logs:/var/log/order-service
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - microservices

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - microservices

networks:
  microservices:
    driver: bridge

volumes:
  grafana-storage:
